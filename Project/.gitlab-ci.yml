stages:
  - build
  - deploy

variables:
  DOCKER_REGISTRY: "seltus"
  FRONTEND_IMAGE: "$DOCKER_REGISTRY/frontend-app"
  BACKEND_IMAGE: "$DOCKER_REGISTRY/backend-app"

# Job for building the frontend
frontend-job:
  stage: build
  image: node:18-alpine  # Use Node.js image for frontend
  script:
    - cd frontend  # Navigate to the frontend directory
    - npm install  # Install frontend dependencies
    - npm run build  # Build the React app (production-ready build)

# Job for building the backend
backend-job:
  stage: build
  image: python:3.12-alpine  # Use Python image for backend
  script:
    - cd backend  # Navigate to the backend directory
    - pip install -r requirements.txt  # Install backend dependencies

# Job for building Docker images and logging into Docker Hub
docker-build:
  stage: build
  image: docker:latest  # Use Docker image to build and push containers
  services:
    - docker:dind  # Docker-in-Docker to enable Docker commands inside CI
  script:
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin  # Log into Docker Hub
    - cd backend  # Navigate to the backend directory
    - docker build -t $BACKEND_IMAGE .  # Build the backend Docker image
    - cd ../frontend  # Navigate to the frontend directory
    - docker build -t $FRONTEND_IMAGE .  # Build the frontend Docker image
    - docker push $BACKEND_IMAGE  # Push the backend Docker image
    - docker push $FRONTEND_IMAGE  # Push the frontend Docker image
  only:
    - main  # Only run on 'main' branch

# Job for deploying the application
deploy:
  stage: deploy
  script:
    - docker-compose -f docker-compose.yml up -d  # Deploy with Docker Compose (adjust this based on your setup)
  environment:
    name: production
    url: http://localhost:5000/  # Your deployed app URL
  only:
    - main  # Only deploy from the 'main' branch
